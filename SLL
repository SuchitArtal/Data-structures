//Singly linked list operations

#include<stdio.h>
#include<stdlib.h>

typedef struct node   //structure defining a node

{
    int data;
    struct node* next;
}node;

node *head = NULL;  //declaring a pointer called head, initialize it to

void traversal()
{
    node *temp=head;
    while (temp!=NULL)
    {
        printf("%d", temp->data);
        temp=temp->next;

    }
    printf("/n");
}

void addFront(int data)
{
    node *newNode = (node*)malloc(sizeof(node));
    newNode->data=data;
    newNode->next=head;
    head=newNode;
}

void addBack(int data)
{
    node *newNode = (node *)malloc(sizeof(node));
    newNode->data=data;
    newNode->next=NULL;

    if (head==NULL)
    {
        head=newNode;
    }
    else
    {
        node *temp=head;
        while (temp->next !=NULL)
        {
            
        }
        temp->next = newNode;
    }
}

void deleteFront()
{
    if (head==NULL)
    {
        printf("List is empty");
        return;
    }
    
    else
    {
        node *temp=head;
        head=head->next;
        free(temp);
    }
}

int deleteBack()
{
    if (head == NULL)
    {
        printf("List is empty\n");
        return -1;
    }


    node *prev = NULL;
    node *temp = head;


    while (temp->next != NULL)
    {
        prev = temp;
        temp = temp->next;
    }


    if (prev == NULL)
    {
        head = NULL;
    }
    else
    {
        prev->next = NULL;
    }


    int delData = temp->data;
    free(temp);


    return delData;
}


int main()
{
    int choice, ele;
    while (1)
    {
        printf("\nMENU OF SINGLE LINKED LIST\n");
        printf("\n1. Display list");
        printf("\n2. Add to front of list");
        printf("\n3. Add to back of list");
        printf("\n4. Delete from front of list");
        printf("\n5. Delete from back of list");
        printf("\n6. Exit");


        printf("\nEnter your choice: ");
        scanf("%d", &choice);


        switch (choice)
        {
        case 1:
            traversal();
            break;
        case 2:
            printf("\nEnter element to be inserted at the front: ");
            scanf("%d", &ele);
            addFront(ele);
            break;
        case 3:
            printf("\nEnter element to be inserted at the back: ");
            scanf("%d", &ele);
            addBack(ele);
            break;
        case 4:
            deleteFront();
            break;
        case 5:
            printf("Deleted data from the back: %d\n", deleteBack());
            break;
        case 6:
            exit(0);
        }
    }
    return 0;
}


